}
}
#non-numeric values
non_numeric_columns <- names(oregon_descriptive)[sapply(oregon_descriptive, function(x) !is.numeric(x))]
unique_non_numeric_values <- lapply(oregon_descriptive[non_numeric_columns], function(x) unique(x))
for (i in seq_along(non_numeric_columns)) {
cat("Column:", non_numeric_columns[i], "\n")
print(unique_non_numeric_values[[i]])
cat("\n")
}
non_numeric_cols <- names(oregon_descriptive)[sapply(oregon_descriptive, function(x) !is.numeric(x))]
for (col in non_numeric_cols) {
# "Yes", "No"
oregon_descriptive[[col]] <- ifelse(oregon_descriptive[[col]] == "Yes", 1,
ifelse(oregon_descriptive[[col]] == "No", 0, oregon_descriptive[[col]]))
#"Selected", "Not selected"
oregon_descriptive[[col]] <- ifelse(oregon_descriptive[[col]] == "Selected", 1,
ifelse(oregon_descriptive[[col]] == "Not selected", 0, oregon_descriptive[[col]]))
#"Submitted an Application to OHP", "Did NOT submit an application to OHP"
oregon_descriptive[[col]] <- ifelse(oregon_descriptive[[col]] == "Submitted an Application to OHP", 1,
ifelse(oregon_descriptive[[col]] == "Did NOT submit an application to OHP", 0, oregon_descriptive[[col]]))
#"Alive" "Dead"
oregon_descriptive[[col]] <- ifelse(oregon_descriptive[[col]] == "Dead", 1,
ifelse(oregon_descriptive[[col]] == "Alive", 0, oregon_descriptive[[col]]))
#"Gave Phone Number", "Did NOT give phone number"
oregon_descriptive[[col]] <- ifelse(oregon_descriptive[[col]] == "Gave Phone Number", 1,
ifelse(oregon_descriptive[[col]] == "Did NOT give phone number", 0, oregon_descriptive[[col]]))
#"signed self up", "signed self up + 1 additional person", "signed self up + 2 additional people"
oregon_descriptive[[col]] <- ifelse(oregon_descriptive[[col]] == "signed self up", 1,
ifelse(oregon_descriptive[[col]] == "signed self up + 1 additional person", 2,
ifelse(oregon_descriptive[[col]] == "signed self up + 2 additional people", 3, oregon_descriptive[[col]])))
#"Requested English materials", "Requested materials in language other than english"
oregon_descriptive[[col]] <- ifelse(oregon_descriptive[[col]] == "Requested English materials", 1,
ifelse(oregon_descriptive[[col]] == "Requested materials in language other than english", 0, oregon_descriptive[[col]]))
#"Did NOT sign up for lottery list on first day", "Signed up for lottery list on first day"
oregon_descriptive[[col]] <- ifelse(oregon_descriptive[[col]] == "Signed up for lottery list on first day", 1,
ifelse(oregon_descriptive[[col]] == "Did NOT sign up for lottery list on first day", 0, oregon_descriptive[[col]]))
#"Did NOT sign up for lottery list on last day", "Signed up for lottery list on last day"
oregon_descriptive[[col]] <- ifelse(oregon_descriptive[[col]] == "Signed up for lottery list on last day", 1,
ifelse(oregon_descriptive[[col]] == "Did NOT sign up for lottery list on last day", 0, oregon_descriptive[[col]]))
#"Signed self up", "Did NOT sign self up"
oregon_descriptive[[col]] <- ifelse(oregon_descriptive[[col]] == "Signed self up", 1,
ifelse(oregon_descriptive[[col]] == "Did NOT sign self up", 0, oregon_descriptive[[col]]))
#"Zip code of residence in a MSA", "Zip code of residence NOT in a MSA"
oregon_descriptive[[col]] <- ifelse(oregon_descriptive[[col]] == "Zip code of residence in a MSA", 1,
ifelse(oregon_descriptive[[col]] == "Zip code of residence NOT in a MSA", 0, oregon_descriptive[[col]]))
}
cols_to_clean <- names(oregon_descriptive)[sapply(oregon_descriptive, function(x) any(grepl("\\d+: ", x)))]
for (col in cols_to_clean) {
oregon_descriptive[[col]] <- gsub("^.*(\\d+):.*", "\\1", oregon_descriptive[[col]])
}
# Convert the columns to numeric
oregon_descriptive[cols_to_clean] <- lapply(oregon_descriptive[cols_to_clean], as.numeric)
# Check unique values in the cleaned columns
for (col in cols_to_clean) {
unique_values <- unique(oregon_descriptive[[col]])
cat("Unique values in", col, ":\n")
print(unique_values)
cat("\n")
}
extract_numeric <- function(x) {
gsub("\\D", "", x)
}
oregon_descriptive$draw_lottery <- extract_numeric(oregon_descriptive$draw_lottery)
oregon_descriptive$week_list <- extract_numeric(oregon_descriptive$week_list)
#check
unique_values_draw_lottery <- unique(oregon_descriptive$draw_lottery)
cat("Unique values in draw_lottery :\n", unique_values_draw_lottery)
unique_values_week_list <- unique(oregon_descriptive$week_list)
cat("\n Unique values in week_list :\n", unique_values_week_list)
oregon_descriptive$dt_retro_coverage <- ymd(oregon_descriptive$dt_retro_coverage)
oregon_descriptive$dt_app_decision <- ymd(oregon_descriptive$dt_app_decision)
oregon_descriptive$retro_year <- year(oregon_descriptive$dt_retro_coverage)
oregon_descriptive$retro_month <- month(oregon_descriptive$dt_retro_coverage)
oregon_descriptive$retro_day <- day(oregon_descriptive$dt_retro_coverage)
oregon_descriptive$app_year <- year(oregon_descriptive$dt_app_decision)
oregon_descriptive$app_month <- month(oregon_descriptive$dt_app_decision)
oregon_descriptive$app_day <- day(oregon_descriptive$dt_app_decision)
#drop dt_
oregon_descriptive <- subset(oregon_descriptive, select = -c(dt_retro_coverage, dt_app_decision))
non_numeric_columns <- names(oregon_descriptive)[sapply(oregon_descriptive, function(x) !is.numeric(x))]
oregon_descriptive <- oregon_descriptive |>
mutate_at(vars(non_numeric_columns), as.numeric)
non_numeric_columns <- names(oregon_descriptive)[sapply(oregon_descriptive, function(x) !is.numeric(x))]
unique_non_numeric_values <- lapply(oregon_descriptive[non_numeric_columns], function(x) unique(x))
for (i in seq_along(non_numeric_columns)) {
cat("Column:", non_numeric_columns[i], "\n")
print(unique_non_numeric_values[[i]])
cat("\n")
}
oregon_descriptive |>
miss_var_summary()|>
filter(n_miss>0)|>
ggplot(aes(variable,pct_miss))+
geom_bar(stat = "identity")
#drop columns that have missing values more than 20%
missing_col <- colMeans(is.na(oregon_descriptive))
complete_cols <- missing_col < 0.2
oregon_descriptive_complete <- oregon_descriptive[,complete_cols]
dim(oregon_descriptive_complete)
#drop rows if female_list is NA
oregon_descriptive <- oregon_descriptive_complete[complete.cases(oregon_descriptive_complete$female_list, oregon_descriptive_complete$zip_msa_list), ]
oregon_descriptive |>
miss_var_summary()|>
filter(n_miss>0)|>
ggplot(aes(variable,pct_miss))+
geom_bar(stat = "identity")
non_numeric_columns <- names(oregon_emergency)[sapply(oregon_emergency, function(x) !is.numeric(x))]
unique_non_numeric_values <- lapply(oregon_emergency[non_numeric_columns], function(x) unique(x))
for (i in seq_along(non_numeric_columns)) {
cat("Column:", non_numeric_columns[i], "\n")
print(unique_non_numeric_values[[i]])
cat("\n")
}
# Replace "Yes" with 1 and "No" with 0
non_numeric_cols <- names(oregon_emergency)[sapply(oregon_emergency, function(x) !is.numeric(x))]
for (col in non_numeric_cols) {
oregon_emergency[[col]] <- ifelse(oregon_emergency[[col]] == "Yes", 1,
ifelse(oregon_emergency[[col]] == "No", 0, oregon_emergency[[col]]))
}
oregon_emergency <- oregon_emergency |>
mutate_at(vars(non_numeric_cols), as.numeric)
#check
non_numeric_columns <- names(oregon_emergency)[sapply(oregon_emergency, function(x) !is.numeric(x))]
unique_non_numeric_values <- lapply(oregon_emergency[non_numeric_columns], function(x) unique(x))
for (i in seq_along(non_numeric_columns)) {
cat("Column:", non_numeric_columns[i], "\n")
print(unique_non_numeric_values[[i]])
cat("\n")
}
#drop columns that have more than 40% missing values
missing_col <- colMeans(is.na(oregon_emergency))
complete_cols <- missing_col < 0.4
oregon_emergency <- oregon_emergency[,complete_cols]
dim(oregon_emergency)
#Most of columns are binary and have few missing values - fill with 0
eg_col<- names(oregon_emergency)
oregon_emergency[eg_col][is.na(oregon_emergency[eg_col])] <- 0
oregon_emergency |>
miss_var_summary()|>
filter(n_miss>0)|>
ggplot(aes(variable,pct_miss))+
geom_bar(stat = "identity")
# oregon_patterns <- read.csv("data/oregonhie_patterns_vars.csv")
library(lubridate)
oregon_patterns$dt_notify_treat <- dmy(oregon_patterns$dt_notify_treat)
oregon_patterns$dt_notify_treat[!is.Date(oregon_patterns$dt_notify_treat)] <- NA
oregon_patterns$gender <- as.numeric(sub("^(\\d+):.*", "\\1", oregon_patterns$female_list))
oregon_patterns$female_list <- NULL
head(oregon_patterns)
# Custom function: converts to lower, trims whitespace and converts to binary
convert_to_binary <- function(df_column, target_string, true_value = 1, false_value = 0) {
df_column <- tolower(df_column)
df_column <- gsub("\\s+|\\$+", "", df_column)
return(ifelse(df_column == target_string, true_value, false_value))
}
# Applying the function to each column
oregon_patterns$have_phone_list <- convert_to_binary(oregon_patterns$have_phone_list, "gave phone number")
oregon_patterns$pobox_list <- convert_to_binary(oregon_patterns$pobox_list, "not pobox", false_value = 1)
oregon_patterns$ohp_all_ever_inperson <- convert_to_binary(oregon_patterns$ohp_all_ever_inperson, "enrolled")
# Custom function to convert "Yes" to 1 and "No" to 0
convert_yes_no_to_binary <- function(column) {
ifelse(column == "Yes", 1, 0)
}
# List of column names to convert
columns_to_convert <- c("any_visit_180p_180", "any_visit_180p_360", "any_visit_180p_540",
"any_visit_180p_720", "preperiod_any_visits", "medicaid_all_180p_period_180",
"medicaid_all_180p_period_360", "medicaid_all_180p_period_540",
"medicaid_all_180p_period_720",
"doc_any_incl_probe_inp",
"any_inp_match_ed",
"treatment")
for (column_name in columns_to_convert) {
oregon_patterns[[column_name]] <- convert_yes_no_to_binary(oregon_patterns[[column_name]])
}
head(oregon_patterns)
oregon_patterns$english_list <- ifelse(oregon_patterns$english_list == "Requested materials in language other than english", 1, 0)
oregon_patterns$self_list <- ifelse(oregon_patterns$self_list == "Signed self up", 1, 0)
head(oregon_patterns)
library(dplyr)
# Using dplyr to remove columns
oregon_patterns <- dplyr::select(oregon_patterns, - first_day_list, -dt_completed_inp, -sample_inp_resp, -ed_any_incl_probe_inp, -draw_lottery,-dt_notify_treat)
head(oregon_patterns)
# Load necessary libraries
library(tidyr)
library(dplyr)
train_data <- oregon_patterns %>% filter(!is.na(weight_total_inp))
prediction_data <- oregon_patterns %>% filter(is.na(weight_total_inp))
# Define the linear regression model using the training data
model <- lm(weight_total_inp ~ weight_720days + weight_540days + weight_360days + weight_180days, data = train_data)
# Predict the missing values using the model
prediction_data$weight_total_inp <- predict(model, newdata = prediction_data)
# Combine the data back together
oregon_patterns <- rbind(train_data, prediction_data)
# health_change_inp
#  "1: Worse" "2: About the same" "0: Better"
oregon_in_person_complete |>
ggplot(aes(x = health_change_inp, fill=as.factor(health_change_inp))) +
geom_bar()+
scale_fill_brewer(palette = "Set1") +
labs(x = "Health Change", y = "Count")+
theme(legend.position = "none")
# happiness_inp
# "0: Very happy"    "1: Pretty happy"  "2: Not too happy"
oregon_in_person_complete |>
ggplot(aes(x = happiness_inp, fill=as.factor(happiness_inp))) +
geom_bar()+
scale_fill_brewer(palette = "Set2") +
labs(x = "Happiness Level", y = "Count")+
theme(legend.position = "none")
oregon_in_person_complete |>
ggplot(aes(x=gender_inp,fill=as.factor(gender_inp))) +
geom_bar()
oregon_in_person_complete |>
ggplot(aes(x = pcs8_score_inp)) +
geom_histogram(bins = 20, color = "black", fill = "steelblue") +
labs(title = "Distribution of Physical Health Scores", x = "Physical Score", y = "Density") +
theme_light()
oregon_in_person_complete |>
ggplot(aes(x = mcs8_score_inp)) +
geom_histogram(bins = 20, color = "black", fill = "violetred") +
labs(title = "Distribution of Mental Health Scores", x = "Mental Score", y = "Density") +
theme_light()
oregon_descriptive |>
mutate(
treatment = as.factor(treatment),
draw_lottery = as.factor(draw_lottery)
) |>
ggplot(aes(x = treatment, fill = treatment)) +
geom_bar() +
labs(title = "Distribution of Treatment Groups", x = "Treatment", y = "Count") +
theme_minimal() +
theme(legend.position = "none")
#Based on the columns description and relativess, we filtered out some columns like zipcode, id columns etc.
oregon_in_person_filtered <- oregon_in_person_complete |>
dplyr::select(
person_id,
weight_total_inp,
age_inp,
race_white_inp,
ins_any_inp,
health_last12_inp,
chl_inp,
bmi_inp,
bp_dar_inp,
bp_sar_inp,
health_change_inp,
sf4_inp,
ast_dx_pre_lottery_inp,
dia_dx_pre_lottery_inp,
hbp_dx_pre_lottery_inp,
chl_dx_pre_lottery_inp,
ami_dx_pre_lottery_inp,
chf_dx_pre_lottery_inp,
emp_dx_pre_lottery_inp,
kid_dx_pre_lottery_inp,
cancer_dx_pre_lottery_inp,
dep_dx_pre_lottery_inp,
dia_dx_post_lottery_inp,
hbp_dx_post_lottery_inp,
chl_dx_post_lottery_inp,
dep_dx_post_lottery_inp,
happiness_inp,
phqtot_inp,
doc_num_incl_probe_inp,
hosp_num_incl_probe_inp,
pcs8_score_inp,
mcs8_score_inp
)
oregon_in_person_filtered|>
vis_dat()
#mearge oregon_in_person with oregon_descriptive
merged_data <- oregon_in_person_filtered |>
left_join(oregon_descriptive|>
dplyr::select(person_id, female_list, treatment), by = "person_id")
dim(merged_data)
#merge with oregon_emergency
merged_data <- merged_data |>
inner_join(oregon_emergency|>
dplyr::select(
person_id,
num_visit_cens_ed, # Number of ED visits in the study period (Censored)
num_hosp_cens_ed, #Number ED visit resulting in a hospitalization in the study period
charg_tot_ed #Sum of total charges in the study period
), by = "person_id")
dim(merged_data)
#merge with oregon_patterns
merged_data <- merged_data |>
inner_join(oregon_patterns|>
dplyr::select(
person_id,
weight_720days, #Weight at 720 days after lottery notification
weight_total_inp,
ohp_all_ever_inperson #Ever enrolled in Medicaid from 10mar2008 until in-person interview date
), by = "person_id")
dim(merged_data)
# health_change_inp
#  "1: Worse" "2: About the same" "0: Better"
# 0 + 2 -> 0, 1 -> 1
table(merged_data$health_change_inp)
merged_data$health_change_inp <- ifelse(merged_data$health_change_inp == 2, 0, merged_data$health_change_inp)
table(merged_data$health_change_inp)
# happiness_inp
# "0: Very happy"    "1: Pretty happy"  "2: Not too happy"
# 0 + 1 -> 0, 2 -> 1
table(merged_data$happiness_inp)
merged_data$happiness_inp <- ifelse(merged_data$happiness_inp %in% c(0, 1), 0, 1)
table(merged_data$happiness_inp)
health_counts <- table(merged_data$health_change_inp)
happy_counts <- table(merged_data$happiness_inp)
barplot(health_counts, col = "lightblue", main = "Health Status")
barplot(happy_counts, col = "lightblue", main = "Happiness Status")
convert_to_factor <- function(df) {
for (col_name in names(df)) {
unique_values <- unique(na.omit(df[[col_name]]))
if (length(unique_values) <= 10) {
df[[col_name]] <- factor(df[[col_name]])
}
}
return(df)
}
modelling_data<-merged_data|>
dplyr::select(-c(person_id))
modelling_data_final <- convert_to_factor(modelling_data)
str(modelling_data_final)
convert_to_factor <- function(df) {
for (col_name in names(df)) {
unique_values <- unique(na.omit(df[[col_name]]))
if (length(unique_values) <= 10) {
df[[col_name]] <- factor(df[[col_name]])
}
}
return(df)
}
modelling_data<-merged_data|>
dplyr::select(-c(person_id))
modelling_data_final <- convert_to_factor(modelling_data)
str(modelling_data_final)
write.csv(modelling_data_final, "cleaned_combined_modelling_data/classification_modelling_data.csv", row.names = FALSE)
happy_rcp <- recipe(happiness_inp ~ .
,data = modelling_data_final)|>
step_normalize(all_numeric_predictors()) |>
step_pca(all_numeric_predictors(),
num_comp = 10) |>
step_dummy(all_nominal_predictors())
parsnip_1 <- logistic_reg() |>
set_mode("classification") |>
set_engine("glm")
workflow_1 <- workflow() |>
add_model(parsnip_1) |>
add_recipe(happy_rcp)
parsnip_2 <- logistic_reg(penalty = 0.01) |>
set_mode("classification") |>
set_engine("glmnet")
workflow_2 <- workflow() |>
add_model(parsnip_2) |>
add_recipe(happy_rcp)
parsnip_3 <- nearest_neighbor() |>
set_mode("classification") |>
set_engine("kknn",
neighbors = 5)
workflow_3 <- workflow() |>
add_model(parsnip_3) |>
add_recipe(happy_rcp)
parsnip_4 <- nearest_neighbor() |>
set_mode("classification") |>
set_engine("kknn",
neighbors = 1)
workflow_4 <- workflow() |>
add_model(parsnip_4) |>
add_recipe(happy_rcp)
parsnip_5 <- rand_forest() |>
set_mode("classification") |>
set_engine("ranger")
workflow_5 <- workflow() |>
add_model(parsnip_5) |>
add_recipe(happy_rcp)
set.seed(11)
happy_split <- initial_split(modelling_data_final,
prop = 0.7,
strata = happiness_inp)
happy_train <- happy_split |>
training()
happy_test <- happy_split |>
testing()
workflow_names <- c("glm",
"glm_lasso",
"knn_5",
"knn_1",
"rf")
workflow_objects <- list(workflow_1,
workflow_2,
workflow_3,
workflow_4,
workflow_5)
workflows_tbl <- tibble(work_names = workflow_names,
work_objects = workflow_objects)
set.seed(1)
workflows_tbl <-  workflows_tbl |>
rowwise() |>
mutate(fits = list(fit(work_objects,
happy_train)))
workflows_tbl_predictions <- workflows_tbl |>
mutate(pred_class = list(predict(fits,
happy_test,
type = "class"))) |>
mutate(pred_prob = list(predict(fits,
happy_test,
type = "prob")))
workflows_tbl_predictions <- workflows_tbl_predictions |>
mutate(predictions = list(bind_cols(pred_class, pred_prob))) |>
dplyr::select(-c(pred_class, pred_prob))
predictions_tbl  <- workflows_tbl_predictions |>
dplyr::select(work_names,
predictions) |>
unnest(cols = c(predictions)) |>
cbind(happiness_inp = happy_test |>
pull(happiness_inp))
glimpse(predictions_tbl)
roc_all <- predictions_tbl |>
group_by(work_names) |>
roc_curve(truth = happiness_inp,
.pred_1,
event_level = "second")
roc_all |>
ggplot(aes(x = 1- specificity,
y = sensitivity,
color = work_names)) +
geom_path()
roc_auc_all <- predictions_tbl |>
group_by(work_names) |>
roc_auc(truth = happiness_inp,
.pred_1,
event_level = "second")
roc_auc_all
workflows_resub <- workflows_tbl |>
mutate(predictions = list(predict(fits,
happy_train,
type = "class")))
predictions_resub  <- workflows_resub |>
dplyr::select(work_names,
predictions) |>
unnest(cols = c(predictions)) |>
cbind(happiness_inp = happy_train |>
pull(happiness_inp))
predictions_resub |>
group_by(work_names) |>
accuracy(truth = happiness_inp,
estimate = .pred_class)
set.seed(1)
val_set <- validation_split(happy_train,
prop = 0.75,
strata = happiness_inp)
val_set |>
class()
set.seed(1)
val_set <- validation_split(happy_train,
prop = 0.75,
strata = happiness_inp)
val_set |>
class()
set.seed(1)
happy_metric_set <- metric_set(accuracy,
roc_auc)
workflows_val <- workflows_tbl |>
mutate(fits = list(fit_resamples(work_objects,
val_set,
metrics = happy_metric_set))) |>
mutate(metrics = list(collect_metrics(fits)))
workflows_val |>
dplyr::select(c(work_names,
metrics)) |>
unnest(metrics) |>
arrange(.metric)
workflows_val |>
dplyr::select(c(work_names,
metrics)) |>
unnest(metrics) |>
ggplot(aes(y = work_names,
fill = work_names,
x = mean)) +
geom_col() +
facet_wrap(~.metric,
nrow = 2)
validation_performance <- workflows_val |>
dplyr::select(c(work_names,
metrics)) |>
unnest(metrics) |>
filter(.metric == "accuracy") |>
arrange(work_names)
resub_performance <- predictions_resub |>
group_by(work_names) |>
accuracy(truth = happiness_inp,
estimate = .pred_class) |>
arrange(work_names)
test_performance <- predictions_tbl |>
group_by(work_names) |>
accuracy(truth = happiness_inp,
estimate = .pred_class) |>
arrange(work_names)
comparison <- test_performance |>
dplyr::select(work_names) |>
mutate(estimate_test = test_performance |> pull(.estimate),
estimate_val = validation_performance |> pull(mean),
estimate_resub = resub_performance |> pull(.estimate))
comparison
healthchange_rcp <- recipe(health_change_inp ~ .
,data = modelling_data_final)|>
step_normalize(all_numeric_predictors()) |>
step_pca(all_numeric_predictors(),
num_comp = 10) |>
step_dummy(all_nominal_predictors())
